<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2008/01/22/displaying-a-webcams-video-in-a-flex-videodisplay-control/ -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				verticalAlign="middle"
				backgroundAlpha="0"
				xmlns:components="freeflowingcode.components.*"
				applicationComplete="init(event)">
	<mx:Style>
		.darkButton {
			color:#fff;
			chromeColor:#3D3D3D;
			fontSize:23;
			cornerRadius:3;
		}
		.lightButton {
			color:#000;
			chromeColor:#fff;
			fontSize:23;
			cornerRadius:3;
		}
		.videoContainer{
			padding: 10 10;
			/* backgroundColor:white;
			borderColor:green;
			borderStyle:solid; */
			
		}
		.vsText{
			color: #fff;
			fontSize: 50;
			paddingRight:0;
			margin:0;
		}
		.flagLabel{
			color:#fff;
			fontSize: 10;	
		}

	</mx:Style>
	
	<!--
	<mx:Style source="/assets/css/yflexskin.css" />-->
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.utils.Base64Encoder;
			import mx.controls.Alert;
			import flash.display.StageDisplayState;
			import flash.display.BitmapData;
			import flash.text.Font;
			import mx.graphics.codec.JPEGEncoder;
			import spark.components.Group;
			import mx.managers.PopUpManager;
			import flash.utils.getTimer;
			
			private var playStream1:NetStream;
			private var publishStream:NetStream;
			private var playStream2:NetStream;
			private var playNetConnection:NetConnection;
			private var play2NetConnection:NetConnection;
			private var publishNetConnection:NetConnection;
			private var camera:Camera;
			private var video1:Video;
			private var video2:Video;

				
			[Bindable]
			private var fullWidth:Number=100;
			[Bindable]
			private var fullHeight:Number=100;
			[Bindable]
			private var normalWidth:Number=400;
			[Bindable]
			private var normalHeight:Number=300;

			[Bindable]
			private var publishLocation:String;

			[Bindable]
			private var serverUrl:String="rtmp://rswcromero-2.local:1935/live";

			//private const SERVER:String="rtmfp://p2p.rtmfp.net/";
			//private const DEVKEY:String="2a1b4488487e674b76882706-88f8fb4c1e15";
			private const SERVER:String="rtmfp";
			private const DEVKEY:String=":";
			private const GROUP_SPEC:String="sharkmob/multicast1";
			private var isNativeIPMulticast=true;
			private var isStreaming:Boolean=false;

			private function init(evt:Event):void
			{
				/* Set up full screen handler. */
				Application.application.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				video1=new Video(normalWidth, normalHeight);
				video1.x=0;
				video1.y=0;
				var uic1:UIComponent=new UIComponent();
				uic1.addChildAt(video1, 0);
				leftStream.addElement(uic1);

				video2=new Video(normalWidth, normalHeight);
				video2.x=0;
				video2.y=0;
				var uic2:UIComponent=new UIComponent();
				uic2.addChildAt(video2, 0);
				rightStream.addElement(uic2);

				flagLabel1.useHandCursor=true;
				flagLabel1.mouseChildren=false;
				flagLabel1.buttonMode=true;

				flagLabel2.useHandCursor=true;
				flagLabel2.mouseChildren=false;
				flagLabel2.buttonMode=true;
				
				connect();
				camera=Camera.getCamera();
				if (camera)
				{
					/* videoDisplay.attachCamera(camera);

					var snap:BitmapData=new BitmapData(128, 96, true);
					var snapBmp:Bitmap=new Bitmap(snap);

					snapBmp.width=128;
					snapBmp.height=96;
					snap.draw(videoDisplay);



					var jpgenc:JPEGEncoder=new JPEGEncoder(80);
					var imgByteArray:ByteArray=jpgenc.encode(snap);
					var encoder:Base64Encoder=new Base64Encoder();
					for (var i:int=0; i < 10000; i++)
						imgByteArray.writeByte(i);

					imgByteArray.position=0;
					encoder.encodeBytes(imgByteArray); */
					//ExternalInterface.call("sendByteArray",encoder.flush());

					//TODO: Detach camera
					ExternalInterface.call("addToQueue");

					ExternalInterface.addCallback("getEntry", getLeaderboardEntry);
					ExternalInterface.addCallback("startStream", startVideo);
					ExternalInterface.addCallback("stopStream", stopVideo);
				}
				/* else
				{
					Security.showSettings(SecurityPanel.CAMERA);
				} */

				ExternalInterface.addCallback("setServer", setServer);
				ExternalInterface.call("asReady"); //lets the js side know that the flex is ready for calls
				ExternalInterface.addCallback("sendStats", updateStats);
				ExternalInterface.addCallback("setWinner", setWinner);
			}
			
			public var viewers:Number = 0;
			public var oldvotes1:Number = 0;
			public var newvotes1:Number = 0;
			public var oldvotes2:Number = 0;
			public var newvotes2:Number = 0;
			public var oldflags1:Number = 0;
			public var newflags1:Number = 0;
			public var oldflags2:Number = 0;
			public var newflags2:Number = 0;
			public var newBattle:Boolean = true;
			
			public function setWinner(data:String)
			{
				//reset life bars
				trace("WINNER");
				timerbar.init();
				timerbar.start();
				timerbar.stop();
				
				timerbar2.init();
				timerbar2.start();
				timerbar2.stop();
				newBattle = true;
			}
			
			private function updateStats(data:String)
			{
				var array:Array = new Array();
				array = data.split("|",7);
				var ac:ArrayCollection = new ArrayCollection(array);
				
				for (var i:int = 0; i < ac.length; i++)
				{
					trace("Array" + i + " " + ac.getItemAt(i).toString());
					if (i == 0)
					{
						viewers = Number(ac.getItemAt(i));
						timerbar.totalTime = Math.round((viewers/2));
						timerbar2.totalTime = Math.round((viewers/2));
						
						if (newBattle)
						{
							timerbar.init();
							timerbar.start();
							timerbar.stop();
							
							timerbar2.init();
							timerbar2.start();
							timerbar2.stop();
							newBattle = false;
						}
					}
					else if (i == 1)
					{
						newvotes1 = Number(ac.getItemAt(i));
						if (oldvotes1 != newvotes1)
						{
							var difference:Number = newvotes1 - oldvotes1;
							for (var i:int = 0; i < difference; i++)
							{
								if (timerbar2.progressTime > 0 )
								{
									timerbar2.timerProgress();
								}
								
							}
							oldvotes1 = newvotes1.valueOf();
						}
					}
					else if (i == 2)
					{
						newvotes2 = Number(ac.getItemAt(i));
						
						if (oldvotes2 != newvotes2)
						{
							var difference:Number = newvotes2 - oldvotes2;
							for (var i:int = 0; i < difference; i++)
							{
								if (timerbar.progressTime > 0)
								{
									timerbar.timerProgress();
								}
							}
							oldvotes2 = newvotes2.valueOf();
						}
					}
					else if (i == 3)
					{
						newflags1 = Number(ac.getItemAt(i));
						
						if (oldflags1 != newflags1)
						{
							var difference:Number = newflags1 - oldflags1;
							for (var i:int = 0; i < difference; i++)
							{
								for (var j:int = 0; j < 10; j++)
								{
									if (timerbar2.progressTime > 0)
									{
										timerbar2.timerProgress(); // for each flag vote 10 *
									}
								}
							}
							oldflags1 = newflags1.valueOf();
						}
					}
					else if (i == 4)
					{
						newflags2 = Number(ac.getItemAt(i));
						if (oldflags2 == newflags2)
						{
							var difference:Number = newflags2 - oldflags2;
							for (var i:int = 0; i < difference; i++)
							{
								for (var j:int = 0; j < 10; j++)
								{
									if (timerbar.progressTime > 0)
									{
										timerbar.timerProgress(); // for each flag vote 10 *
									}
								}
							}
							oldflags2 = newflags2.valueOf();
						}
					}
				}
				//getMovie().sendStats(data.stats.viewers + "|" + data.stats.vote1 + "|" + data.stats.vote2 + "|" + data.stats.flag1 +"|"+ data.stats.flag2);
			}
			
			private function sendByteArray(data:ByteArray):void
			{
			/* var encoder:Base64Encoder=new Base64Encoder();

			for (var i:int=0; i < 10000; i++)
				data.writeByte(i);

			data.position=0;
			encoder.encodeBytes(data);

			var req:URLRequest=new URLRequest("http://imm.io/store/");
			req.method=URLRequestMethod.POST;
			req.contentType="multipart/form-data";
			var postData:URLVariables=new URLVariables();
			postData.name = "snapshot.jpg";
			postData.image=encoder.flush();
			req.data=postData;

			var loader:URLLoader=new URLLoader();
			loader.dataFormat=URLLoaderDataFormat.BINARY;
			loader.addEventListener(Event.COMPLETE, loader_complete);
			loader.load(req); */

			}

			private function loader_complete(event:Event):void
			{
				//trace"Upload complete!");
				//videoDisplay.attachCamera(null);
			}

			public function getLeaderboardEntry():void
			{
				var dialog:LeaderEntry=PopUpManager.createPopUp(this, LeaderEntry, true) as LeaderEntry;
				PopUpManager.centerPopUp(dialog);

			}

			private function setServer(url:String):void
			{
				serverUrl=url;
			/* leftStream.source=serverUrl + "/stream1.sdp";
			rightStream.source=serverUrl + "/stream2.sdp"; */
			}

			private function fullScreenHandler(evt:FullScreenEvent):void
			{

				if (evt.fullScreen)
				{
					/* Do something specific here if we switched to full screen mode. */
				}
				else
				{
					/* Do something specific here if we switched to normal mode. */
				}
			}

			private function toggleFullScreen():void
			{
				try
				{
					switch (Application.application.stage.displayState)
					{
						case StageDisplayState.FULL_SCREEN:
							/* If already in full screen mode, switch to normal mode. */
							Application.application.stage.displayState=StageDisplayState.NORMAL;
							video2.width=normalWidth;
							video2.height=normalHeight;
							video1.width=normalWidth;
							video1.height=normalHeight;
							video1.x=0;
							video1.y=0;
							video2.x=0;
							video2.y=0;
							break;
						default:
							/* If not in full screen mode, switch to full screen mode. */
							Application.application.stage.displayState=StageDisplayState.FULL_SCREEN;
							video2.width=Application.application.stage.stageWidth / 2.2;
							video2.height=Application.application.stage.stageHeight / 2.2;
							video1.width=Application.application.stage.stageWidth / 2.2;
							video1.height=Application.application.stage.stageHeight / 2.2;

							video1.x=-200;
							video1.y=0;
							video2.x=-200;
							video2.y=0;
							//Alert.show("video1: " +video1.x.toString() +" "+ video1.y.toString());
							//Alert.show("video2: " +video2.x.toString() +" "+ video2.y.toString());
							break;
					}

					/* video2.validateNow();
					video1.validateNow(); */
				}
				catch (err:SecurityError)
				{
					// ignore
				}
			}

			public function stopVideo():void
			{
				//video1.attachCamera(null);
				//playStream1.close();
				//Alert.show("stopStream!");
				isStreaming=false;
			}

			public function startVideo(stream:String):void
			{
				//trace"startVideo with: " + stream);
				//Alert.show("startStream!");
				isStreaming=true;
				if (stream == "stream1" || stream == "stream2")
				{
					publishLocation=stream;
					//camera = flash.media.Camera.getCamera("2");
					/* camera=Camera.getCamera();

						if (camera)
						{
							camera.setMode(300, 240, 30)
							camera.setQuality(0, 90);

							camera.setKeyFrameInterval(24);

							//ns=new NetStream(nc);
							//playStream1.attachAudio(Microphone.getMicrophone());
							//playStream1.addEventListener(NetStatusEvent.NET_STATUS, onPublish);
							//playStream1.bufferTime=0;
							//playStream1.publish(publishLocation, "live");
							playStream1.attachCamera(camera);
							//trace"playStream1.attachCamera(camera)");
							playStream1.publish("stream1");
							video1.attachCamera(camera);

						} */

					publishNetConnection=new NetConnection();
					publishNetConnection.addEventListener(NetStatusEvent.NET_STATUS, publishNetStatus);
					publishNetConnection.connect(SERVER + DEVKEY);
						//setupPublishStream();
						///nc.connect('rtmp://localhost:1935/live');  
					/*
										if (camera)
										{
											//camera.setMode(400, 300, 15, false);


										}
										else
										{
											////Alert.show("You don't seem to have a camera.");
										} */

				}


			}

			private function connect():void
			{

				playNetConnection=new NetConnection();
				playNetConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				playNetConnection.connect(SERVER + DEVKEY);

				play2NetConnection=new NetConnection();
				play2NetConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				play2NetConnection.connect(SERVER + DEVKEY);
				//trace"private function connect():void");
			}

			private function setupPlayStream():void
			{
				try
				{
					var groupspec:GroupSpecifier=new GroupSpecifier(GROUP_SPEC);
					groupspec.serverChannelEnabled=true;
					groupspec.multicastEnabled=true;
					if (isNativeIPMulticast)
					{
						groupspec.ipMulticastMemberUpdatesEnabled=true;
						groupspec.addIPMulticastAddress("225.225.0.1:30303");
					}

					playStream1=new NetStream(playNetConnection, groupspec.groupspecWithAuthorizations());
					playStream1.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				}
				catch (e:Error)
				{
				}

				//trace"private function setupPlayStream():void");
			}

			private function setupPublishStream():void
			{
				try
				{
					//Alert.show("setupPublishStream()");
					var groupspec:GroupSpecifier=new GroupSpecifier(GROUP_SPEC);
					groupspec.serverChannelEnabled=true;
					groupspec.multicastEnabled=true;
					if (isNativeIPMulticast)
					{
						groupspec.ipMulticastMemberUpdatesEnabled=true;
						groupspec.addIPMulticastAddress("225.225.0.1:30303");
					}
					publishStream=new NetStream(publishNetConnection, groupspec.groupspecWithAuthorizations());
					publishStream.addEventListener(NetStatusEvent.NET_STATUS, publishNetStatus);
				}
				catch (e:Error)
				{
				}
				//trace"private function setupPublishStream():void");
			}

			private function setupPlayStream2():void
			{
				try
				{
					var groupspec2:GroupSpecifier=new GroupSpecifier(GROUP_SPEC);
					groupspec2.serverChannelEnabled=true;
					groupspec2.multicastEnabled=true;
					if (isNativeIPMulticast)
					{
						groupspec2.ipMulticastMemberUpdatesEnabled=true;
						groupspec2.addIPMulticastAddress("225.225.0.1:30303");
					}

					playStream2=new NetStream(play2NetConnection, groupspec2.groupspecWithAuthorizations());
					playStream2.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
						//trace"private function setupPlayStream2():void");
				}
				catch (e:Error)
				{
				}
			}

			private function onNetConnectionNetStatus(event:NetStatusEvent):void
			{
				//trace"private function onNetConnectionNetStatus(event:NetStatusEvent):void");
				//traceevent.info.code);
				switch (event.info.code)
				{
					case "NetStream.Connect.Success":
						event.info.stream.dispatchEvent(event);
						break;
				}
			}

			private function publishNetStatus(event:NetStatusEvent):void
			{
				try
				{


					//trace"private function netStatus(event:NetStatusEvent):void");
					//traceevent.info.code);
					switch (event.info.code)
					{
						case "NetConnection.Connect.Success":
							if (isStreaming)
							{
								setupPublishStream();
							}
							break;
						case "NetStream.Connect.Success":
							if (isStreaming)
							{
								//Alert.show("publishStream.play(" + publishLocation + ");");
								camera=Camera.getCamera()
								//Setup camera for best possible quality
								camera.setMode(300, 240, 30)
								camera.setQuality(0, 90);

								camera.setKeyFrameInterval(24);
								publishStream.attachAudio(Microphone.getMicrophone());
								publishStream.attachCamera(camera);

								publishStream.publish(publishLocation);
									//video1.attachCamera(camera);
							}
							break;
						case "NetStream.Publish.Start":
							{
								ExternalInterface.call("startedStreaming", publishLocation);
								break;
							}
					}
				}
				catch (e:Error)
				{

				}
			}

			private function netStatus(event:NetStatusEvent):void
			{
				//trace"private function netStatus(event:NetStatusEvent):void");
				trace(event.info.code);
				switch (event.info.code)
				{
					case "NetConnection.Connect.Success":
						setupPlayStream();
						setupPlayStream2();
						break;

					case "NetStream.Connect.Success":
						if (playStream1 != null)
						{
							playStream1.play("stream1");
							video1.attachNetStream(playStream1);

						}
						if (playStream2 != null)
						{
							playStream2.play("stream2");
							video2.attachNetStream(playStream2);
						}

						//microphone.rate = 11;

						//microphone.setSilenceLevel(0);

						break;
					default:
						////Alert.show(event.info.code);
						////Alert.show(event.target.toString());
						break;

				}
			}

			private function vote(stream:Number):void
			{
				ExternalInterface.call("vote(" + stream + ")");
				
				/* if (stream == 2)
				{
					timerbar.timerProgress();
				}
				else
				{
					timerbar2.timerProgress();
				} */
			}

			private function enlargeVote(num:Number):void
			{
				if (num == 1)
				{
					vote1Button.label="VOTE!";
					vote1Button.percentWidth=100;
				}
				else if (num == 2)
				{
					vote2Button.label="VOTE!";
					vote2Button.percentWidth=100;
				}
			}

			private function shrinkVote(num:Number):void
			{
				if (num == 1)
				{
					vote1Button.label="";
					vote1Button.width=20;
				}
				else if (num == 2)
				{
					vote2Button.label="";
					vote2Button.width=20;
				}
			}

			private function flag(stream:Number):void
			{
				ExternalInterface.call("flag(" + stream + ")");
				if (stream == 1)
				{
					//TODO: do something here to leftStream
				}
				else if (stream == 2)
				{
					//TODO: do something here to rightStream
				}
			}
		]]>
	</mx:Script>
	<!-- this is the hidden local cam -->
	<!--	<mx:VideoDisplay id="videoDisplay"
						 includeInLayout="false"
						 visible="false"
						 width="{normalWidth}"
						 height="{normalHeight}"/>-->
	<mx:VBox id="mainContainer"
			 width="100%"
			 height="100%"
			 horizontalCenter="0"
			 horizontalAlign="center">


		<mx:HBox width="100%"
				 height="100%"
				 horizontalCenter="0"
				 horizontalAlign="center">
				 
				 
			<mx:VBox id="leftContainer"
					 width="40%"
					 height="100%"
					 horizontalAlign="right"
					 horizontalCenter="0"
					 verticalAlign="middle"
					 rollOverEffect="enlargeVote(1)"
					 rollOutEffect="shrinkVote(1)">
					 
					 
				  <components:TimerBar id="timerbar" creationComplete="event.currentTarget.init();timerbar.stop();" width="400" height="40"
				  cornerRadius="10"  reverseProgress="true" />		
				  
				<mx:HBox id="leftStream"
						 styleName="videoContainer"
						 width="{normalWidth}"
						 height="{normalHeight}"/>
				<mx:VBox width="100%"
						 horizontalGap="1"
						 verticalAlign="bottom"
						 baseline="0"
						 id="leftControls">
					<mx:Button id="vote1Button"
							   label="V O T E!"
							   styleName="lightButton"
							   toolTip="Vote Up!"
							   click="vote(1)"
							   buttonMode = "true"
							   useHandCursor = "true"
							   mouseChildren="false" 
							   width="100%"
							   icon="@Embed(source='../assets/up.png')"/>
					<mx:Label styleName="flagLabel"
							  htmlText="&lt;u&gt;Report this video as abusive / inappropriate&lt;/uu&gt;"
							  id="flagLabel1"
							  buttonMode = "true"
							  useHandCursor = "true"
							  mouseChildren="false" 
							  click="flag(1)"/>
					<!--<mx:Button label=""
							   styleName="darkButton"
							   toolTip="Flag Inappropriate"
							   click="flag(1)"
							   icon="@Embed(source='../assets/flag.png')"/>-->
				</mx:VBox>

			</mx:VBox>


			<mx:VBox id="midContainer"
					 height="100%"
					 horizontalScrollPolicy="off"
					 width="50"
					 verticalAlign="middle"
					 horizontalAlign="center">
				<mx:Label text="vs"
						  styleName="vsText"
						  id="vsText"/>
				<mx:Button icon="@Embed(source='../assets/fullscreen.png')"
						   styleName="darkButton"
						   toolTip="Fullscreen!"
						   paddingBottom="2"
						   paddingLeft="0"
						   paddingRight="0"
						   paddingTop="2"
						   width="36"
						   click="toggleFullScreen()"/>
			</mx:VBox>
			<mx:VBox id="rightContainer"
					 width="40%"
					 height="100%"
					 rollOverEffect="enlargeVote(2)"
					 rollOutEffect="shrinkVote(2)"
					 horizontalAlign="right"
					 horizontalCenter="0"
					 verticalAlign="middle">
					
				 <components:TimerBar id="timerbar2" creationComplete="event.currentTarget.init(); timerbar2.stop();" width="400" height="40"
				  cornerRadius="10"  reverseProgress="true" />		
		
				<mx:HBox id="rightStream"
						 styleName="videoContainer"
						 width="{normalWidth}"
						 height="{normalHeight}"/>
				<mx:VBox width="100%"
						 verticalAlign="bottom"
						 baseline="0"
						 id="rightControls">
					<mx:Button id="vote2Button"
							   styleName="lightButton"
							   label="V O T E!"
							   toolTip="Vote Up!"
							   click="vote(2)"
							   buttonMode = "true"
							   useHandCursor = "true"
							   mouseChildren="false" 
							   width="100%"
							   icon="@Embed(source='../assets/up.png')"/>
					<mx:Label styleName="flagLabel"
							  id="flagLabel2"
							  htmlText="&lt;u&gt;Report this video as abusive / inappropriate&lt;/uu&gt;"
							  buttonMode = "true"
							  useHandCursor = "true"
							  mouseChildren="false" 
							  click="flag(2)"/>
					<!--<mx:Button label=""
							   styleName="darkButton"
							   toolTip="Flag Inappropriate"
							   click="flag(2)"
							   icon="@Embed(source='../assets/flag.png')"/>-->
				</mx:VBox>

			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
</mx:Application>

<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2008/01/22/displaying-a-webcams-video-in-a-flex-videodisplay-control/ -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				verticalAlign="middle"
				backgroundColor="black"
				applicationComplete="init(event)">
	<mx:Style>
		Button 
		{
			padding-bottom:1px;
			padding-top:1px;
			padding-right:3px;
			padding-left:3px;
			
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.utils.Base64Encoder;
			import mx.controls.Alert;
			import flash.display.StageDisplayState;
			import flash.display.BitmapData;
			import mx.graphics.codec.JPEGEncoder;

			private var ns:NetStream;
			private var ns2:NetStream;
			private var nc:NetConnection;
			private var camera:Camera;



			[Bindable]
			private var fullWidth:Number=100;
			[Bindable]
			private var fullHeight:Number=100;
			[Bindable]
			private var normalWidth:Number=400;
			[Bindable]
			private var normalHeight:Number=300;

			[Bindable]
			private var publishLocation:String;

			[Bindable]
			private var serverUrl:String="rtmp://rswfrodriguez.local:1935/live";

			private function init(evt:Event):void
			{
				/* Set up full screen handler. */
				Application.application.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);

				camera=Camera.getCamera();
				if (camera)
				{
					/* videoDisplay.attachCamera(camera);

					var snap:BitmapData=new BitmapData(128, 96, true);
					var snapBmp:Bitmap=new Bitmap(snap);

					snapBmp.width=128;
					snapBmp.height=96;
					snap.draw(videoDisplay);



					var jpgenc:JPEGEncoder=new JPEGEncoder(80);
					var imgByteArray:ByteArray=jpgenc.encode(snap);
					var encoder:Base64Encoder=new Base64Encoder();
					for (var i:int=0; i < 10000; i++)
						imgByteArray.writeByte(i);

					imgByteArray.position=0;
					encoder.encodeBytes(imgByteArray); */
					//ExternalInterface.call("sendByteArray",encoder.flush());

					//TODO: Detach camera
					ExternalInterface.call("addToQueue");
					ExternalInterface.addCallback("startStream", startVideo);
					ExternalInterface.addCallback("stopStream", stopVideo);
				}

				ExternalInterface.addCallback("setServer", setServer);


			}

			private function sendByteArray(data:ByteArray):void
			{
				/* var encoder:Base64Encoder=new Base64Encoder();

				for (var i:int=0; i < 10000; i++)
					data.writeByte(i);

				data.position=0;
				encoder.encodeBytes(data);

				var req:URLRequest=new URLRequest("http://imm.io/store/");
				req.method=URLRequestMethod.POST;
				req.contentType="multipart/form-data";
				var postData:URLVariables=new URLVariables();
				postData.name = "snapshot.jpg";
				postData.image=encoder.flush();
				req.data=postData;

				var loader:URLLoader=new URLLoader();
				loader.dataFormat=URLLoaderDataFormat.BINARY;
				loader.addEventListener(Event.COMPLETE, loader_complete);
				loader.load(req); */

			}

			private function loader_complete(event:Event):void
			{
				trace("Upload complete!");
				videoDisplay.attachCamera(null);
			}


			private function setServer(url:String):void
			{
				serverUrl=url;
				leftStream.source=serverUrl + "/stream1.sdp";
				rightStream.source=serverUrl + "/stream2.sdp";
			}

			private function fullScreenHandler(evt:FullScreenEvent):void
			{

				if (evt.fullScreen)
				{
					/* Do something specific here if we switched to full screen mode. */
				}
				else
				{
					/* Do something specific here if we switched to normal mode. */
				}
			}

			private function toggleFullScreen():void
			{
				try
				{
					switch (Application.application.stage.displayState)
					{
						case StageDisplayState.FULL_SCREEN:
							/* If already in full screen mode, switch to normal mode. */
							Application.application.stage.displayState=StageDisplayState.NORMAL;
							rightStream.width=normalWidth;
							rightStream.height=normalHeight;
							leftStream.width=normalWidth;
							leftStream.height=normalHeight;
							break;
						default:
							/* If not in full screen mode, switch to full screen mode. */
							Application.application.stage.displayState=StageDisplayState.FULL_SCREEN;
							rightStream.percentHeight=fullWidth;
							rightStream.percentWidth=fullHeight;
							leftStream.percentHeight=fullWidth;
							leftStream.percentWidth=fullHeight;

							break;
					}
					leftStream.validateNow();
					rightStream.validateNow();
				}
				catch (err:SecurityError)
				{
					// ignore
				}
			}
			public function stopVideo():void
			{
				videoDisplay.attachCamera(null);
				ns.close();
				//Alert.show("stopStream!");
			}
			public function startVideo(stream:String):void
			{
				//Alert.show("startStream!");
				if (stream == "stream1" || stream == "stream2")
				{
					publishLocation=stream + ".sdp";
					//camera = flash.media.Camera.getCamera("2");
					camera=Camera.getCamera();


					nc=new NetConnection();
					nc.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
					nc.connect(serverUrl);
					///nc.connect('rtmp://localhost:1935/live');  

					if (camera)
					{
						//camera.setMode(400, 300, 15, false);
						camera.setMode(300, 240, 30)
						camera.setQuality(0, 90);

						camera.setKeyFrameInterval(24);

						//microphone.rate = 11;

						//microphone.setSilenceLevel(0);

						videoDisplay.attachCamera(camera);

					}
					else
					{
						//Alert.show("You don't seem to have a camera.");
					}

				}


			}

			private function netStatus(event:NetStatusEvent):void
			{
				switch (event.info.code)
				{
					case "NetConnection.Connect.Success":
					{
						ns=new NetStream(nc);
						ns.attachCamera(camera);
						ns.attachAudio(Microphone.getMicrophone());
						//ns.addEventListener(NetStatusEvent.NET_STATUS, onPublish);
						ns.bufferTime=0;
						ns.publish(publishLocation, "live");

							//ns.attachCamera(camera);

							//ns.attachAudio(microphone);
							// add custom metadata to the stream
						/*
										var metaData:Object = new Object();

										metaData["description"] = "Chat using VideoChat example."

										nsPublish.send("@setDataFrame", "onMetaData", metaData); */








					}
				}
			}

			private function vote(stream:Number):void
			{
				ExternalInterface.call("vote(" + stream + ")");
			}

			private function flag(stream:Number):void
			{
				ExternalInterface.call("flag(" + stream + ")");
				if (stream == 1)
				{
					//TODO: do something here to leftStream
				}
				else if (stream == 2)
				{
					//TODO: do something here to rightStream
				}
			}
		]]>
	</mx:Script>
	<!-- this is the hidden local cam -->
	<mx:VideoDisplay id="videoDisplay"
					 includeInLayout="false"
					 visible="false"
					 width="{normalWidth}"
					 height="{normalHeight}"/>
	<mx:VBox id="mainContainer"
			 width="100%"
			 height="100%"
			 horizontalCenter="0"
			 verticalAlign="middle"
			 horizontalAlign="center">


		<mx:HBox width="100%"
				 height="100%"
				 horizontalCenter="0"
				 verticalAlign="middle"
				 horizontalAlign="center">

			<mx:VBox id="leftContainer"
					 width="50%"
					 height="100%"
					 horizontalAlign="center"
					 horizontalCenter="0"
					 verticalAlign="middle">
				<mx:VideoDisplay id="leftStream"
					rollOverEffect=""
								 width="{normalWidth}"
								 height="{normalHeight}"
								 live="true"
								 autoPlay="true"
								 source="{serverUrl + '/stream1.sdp'}"/>
				<mx:HBox width="100%"
						 horizontalAlign="right"
						 horizontalGap="1"
						 id="leftControls">
					<mx:Button label=""
							   toolTip="Vote Up!"
							   click="vote(1)"
							   icon="@Embed(source='../assets/up.png')"/>
					<mx:Button label=""
							   toolTip="Flag Inappropriate"
							   click="flag(1)"
							   icon="@Embed(source='../assets/flag.png')"/>
				</mx:HBox>

			</mx:VBox>


			<mx:Spacer width="20"/>
			<mx:VBox id="rightContainer"
					 width="50%"
					 height="100%"
					 horizontalAlign="right"
					 horizontalCenter="0"
					 verticalAlign="middle">
				<mx:VideoDisplay id="rightStream"
								 width="{normalWidth}"
								 height="{normalHeight}"
								 live="true"
								 autoPlay="true"
								 source="{serverUrl + '/stream2.sdp'}"/>
				<mx:HBox width="100%"
						 horizontalAlign="right"
						 horizontalGap="1"
						 id="rightControls">
					<mx:Button label=""
							   toolTip="Vote Up!"
							   click="vote(2)"
							   icon="@Embed(source='../assets/up.png')"/>
					<mx:Button label=""
							   toolTip="Flag Inappropriate"
							   click="flag(2)"
							   icon="@Embed(source='../assets/flag.png')"/>
				</mx:HBox>

			</mx:VBox>
		</mx:HBox>
		<mx:Button label="[]"
				   click="toggleFullScreen()"/>
	</mx:VBox>
</mx:Application>

<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2008/01/22/displaying-a-webcams-video-in-a-flex-videodisplay-control/ -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				verticalAlign="middle"
				styleName="app"
				backgroundColor="#ffffff"
				xmlns:components="freeflowingcode.components.*"
				applicationComplete="init(event)">
	<mx:Style>
		.app{
			background-image: Embed("assets/images/bg.jpg");
		}
		.darkButton {
			color:#fff;
			chromeColor:#3D3D3D;
			fontSize:23;
			cornerRadius:3;
		}
		.voteButton {
			color:#000;
			chromeColor:#ffffff;
			fontSize:23;
			cornerRadius:3;
			padding:20 20;
		}
		.videoContainer{
			padding: 10 10;
			/* backgroundColor:white;
			borderColor:green;
			borderStyle:solid; */
			
		}
		.vsText{
			color: #fff;
			fontSize: 40;
			paddingRight:0;
			margin:0;
		}
		.flagLabel{
			color:#fff;
			fontSize: 10;	
			chromeColor: #000;
		}

	</mx:Style>

	<!--
	<mx:Style source="/assets/css/yflexskin.css" />-->
	<mx:Script>
		<![CDATA[
			import flash.display.BitmapData;
			import flash.display.StageDisplayState;
			import flash.net.GroupSpecifier;
			import flash.text.Font;
			import flash.utils.getTimer;
			import flash.system.Security;
			import flash.system.SecurityPanel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.managers.PopUpManager;
			import mx.utils.Base64Encoder;
			
			
			//NetConnection, NetStream for Playing Stream 1
			private var netConnection:NetConnection = null;
			private var playNetConnection:NetConnection = null;
			private var playStream1:NetStream = null;

			private var playStream2:NetStream = null;
			
			//NetConnection, NetStream for PUBLISHING			
			private var publishNetConnection:NetConnection = null;
			private var publishStream:NetStream = null;
			
			private var netGroup:NetGroup = null;
			private var camera:Camera;
			private var video1:Video;
			private var video2:Video;
			public var viewers:Number=0;
			public var oldvotes1:Number=0;
			public var newvotes1:Number=0;
			public var oldvotes2:Number=0;
			public var newvotes2:Number=0;
			public var oldflags1:Number=0;
			public var newflags1:Number=0;
			public var oldflags2:Number=0;
			public var newflags2:Number=0;
			public var newBattle:Boolean=true;
			private var blurFilter:BlurFilter = new BlurFilter(128,128,1);
			private var filterArray:Array = [blurFilter];

			[Bindable]
			private var fullWidth:Number=100;
			[Bindable]
			private var fullHeight:Number=100;
			[Bindable]
			private var normalWidth:Number=400;
			[Bindable]
			private var normalHeight:Number=300;

			[Bindable]
			private var publishLocation:String = "";

			[Bindable]
			private var serverUrl:String="rtmp://rswcromero-2.local:1935/live";

			private var SERVER:String="rtmfp://p2p.rtmfp.net/";
			private var DEVKEY:String="2a1b4488487e674b76882706-88f8fb4c1e15";
			//private var SERVER:String="rtmfp://ec2-174-129-115-133.compute-1.amazonaws.com:1935";
			//private var DEVKEY:String="/multicast/";
			private const GROUP_SPEC:String="sharkmob/multicast1";
			private var isNativeIPMulticast:Boolean=false;
			private var isStreaming:Boolean=false;
			[Bindable] private var isBattle:Boolean=true;
			private var hasConnectedToP2P:Boolean=false;
			
			private function init(evt:Event):void
			{

				try
				{
					/* Set up full screen handler. */
					Application.application.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
					video1=new Video(normalWidth, normalHeight);
					video1.x=0;
					video1.y=0;
					var uic1:UIComponent=new UIComponent();
					uic1.addChildAt(video1, 0);
					leftStream.addElement(uic1);
					
					video2=new Video(normalWidth, normalHeight);
					video2.x=0;
					video2.y=0;
					var uic2:UIComponent=new UIComponent();
					uic2.addChildAt(video2, 0);
					rightStream.addElement(uic2);
					
					flagLabel1.useHandCursor=true;
					flagLabel1.mouseChildren=false;
					flagLabel1.buttonMode=true;
					
					flagLabel2.useHandCursor=true;
					flagLabel2.mouseChildren=false;
					flagLabel2.buttonMode=true;
					
					if (isNativeIPMulticast)
					{
						SERVER="rtmfp";
						DEVKEY=":";
					}
					
					connect();
					camera=Camera.getCamera();
					if (camera)
					{
						
						camera.addEventListener(StatusEvent.STATUS, cameraStatusHandler);
						ExternalInterface.addCallback("getEntry", getLeaderboardEntry);
						ExternalInterface.addCallback("startStream", startVideo);
						//Security.showSettings(SecurityPanel.CAMERA);//to get permission already!
					}
					/* else
					{
					Security.showSettings(SecurityPanel.CAMERA);
					} */
					ExternalInterface.addCallback("updateStats", updateStats);
					ExternalInterface.addCallback("setServer", setServer);
					ExternalInterface.addCallback("setWinner", setWinner);
					ExternalInterface.addCallback("startBattle", startBattle);
					ExternalInterface.addCallback("stopStream", stopVideo);
					
					//leave this as the last call, to notify JS that we're ready to rock-n-roll
					ExternalInterface.call("asReady");

				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}
			}

			private function cameraStatusHandler(event:StatusEvent):void
			{
				if (event.code == "Camera.Muted" && isStreaming && publishLocation != "")
				{
					ExternalInterface.call("abortStream", publishLocation);
				}
			}
			public function startBattle():void
			{
				isBattle = true;
				video1.filters = null;
				video2.filters = null;
			}

			public function setWinner(data:String):void
			{
				//flip isBattle to disable controls while other battle starts!
				isBattle = false;
				//reset life bars
				//Alert.show("WINNER");
				timerbar.init();
				timerbar.start();
				timerbar.stop();

				timerbar2.init();
				timerbar2.start();
				timerbar2.stop();
				newBattle=true;
				//updateStats(getStats());
				
				
				//set filters on videos
				
				if (data == "1"){
					video2.filters = filterArray;
				}
				else if (data =="2"){
					video1.filters = filterArray;
				}
				
					
			}

			public function getStats():String
			{
				var stats:String=ExternalInterface.call("getStats");
				return stats;
			}

			public function updateStats(data:String):void
			{
				//Alert.show("updateStats called!:" + data);
				try
				{


					var array:Array=data.split("|");
					viewers=Number(array[0]);
					timerbar.totalTime=Math.round((viewers / 2));
					timerbar2.totalTime=Math.round((viewers / 2));

					if (newBattle)
					{
						timerbar.init();
						timerbar.start();
						timerbar.stop();

						timerbar2.init();
						timerbar2.start();
						timerbar2.stop();
						newBattle=false;
					}
					newvotes1=Number(array[1]);
					if (oldvotes1 != newvotes1)
					{
						var difference:Number=newvotes1 - oldvotes1;
						for (var i:int=0; i < difference; i++)
						{
							if (timerbar2.progressTime > 0)
							{
								timerbar2.timerProgress();
							}

						}
						oldvotes1=newvotes1.valueOf();
					}
					newvotes2=Number(array[2]);

					if (oldvotes2 != newvotes2)
					{
						var difference:Number=newvotes2 - oldvotes2;
						for (var i:int=0; i < difference; i++)
						{
							if (timerbar.progressTime > 0)
							{
								timerbar.timerProgress();
							}
						}
						oldvotes2=newvotes2.valueOf();
					}
					newflags1=Number(array[3]);

					if (oldflags1 != newflags1)
					{
						var difference:Number=newflags1 - oldflags1;
						for (var i:int=0; i < difference; i++)
						{
							for (var j:int=0; j < 10; j++)
							{
								if (timerbar.progressTime > 0)
								{
									timerbar.timerProgress(); // for each flag vote 10 *
								}
							}
						}
						oldflags1=newflags1.valueOf();
					}
					newflags2=Number(array[4]);
					if (oldflags2 == newflags2)
					{
						var difference:Number=newflags2 - oldflags2;
						for (var i:int=0; i < difference; i++)
						{
							for (var j:int=0; j < 10; j++)
							{
								if (timerbar2.progressTime > 0)
								{
									timerbar2.timerProgress(); // for each flag vote 10 *
								}
							}
						}
						oldflags2=newflags2.valueOf();
					}
						//Alert.show("newvotes2: " + newvotes2 + ",newvotes1: " + newvotes1 + ",viewers: " + viewers + ", newflags1: "+newflags1+", newflags2: "+newflags2);
				}
				catch (error:Error)
				{
					Alert.show(error.message);
				}

				//getMovie().sendStats(data.stats.viewers + "|" + data.stats.vote1 + "|" + data.stats.vote2 + "|" + data.stats.flag1 +"|"+ data.stats.flag2); */
			}

			public function getLeaderboardEntry():void
			{
				var dialog:LeaderEntry=PopUpManager.createPopUp(this, LeaderEntry, true) as LeaderEntry;
				PopUpManager.centerPopUp(dialog);

			}

			private function setServer(url:String):void
			{
				serverUrl=url;
			}

			private function fullScreenHandler(evt:FullScreenEvent):void
			{

				if (evt.fullScreen)
				{
					/* Do something specific here if we switched to full screen mode. */
				}
				else
				{
					/* Do something specific here if we switched to normal mode. */
				}
			}

			private function toggleFullScreen():void
			{
				try
				{
					switch (Application.application.stage.displayState)
					{
						case StageDisplayState.FULL_SCREEN:
							/* If already in full screen mode, switch to normal mode. */
							Application.application.stage.displayState=StageDisplayState.NORMAL;
							video2.width=normalWidth;
							video2.height=normalHeight;
							video1.width=normalWidth;
							video1.height=normalHeight;
							video1.x=0;
							video1.y=0;
							video2.x=0;
							video2.y=0;
							break;
						default:
							/* If not in full screen mode, switch to full screen mode. */
							Application.application.stage.displayState=StageDisplayState.FULL_SCREEN;
							video2.width=Application.application.stage.stageWidth / 2.2;
							video2.height=Application.application.stage.stageHeight / 2.2;
							video1.width=Application.application.stage.stageWidth / 2.2;
							video1.height=Application.application.stage.stageHeight / 2.2;

							video1.x=-200;
							video1.y=0;
							video2.x=-200;
							video2.y=0;
							//Alert.show("video1: " +video1.x.toString() +" "+ video1.y.toString());
							//Alert.show("video2: " +video2.x.toString() +" "+ video2.y.toString());
							break;
					}

					/* video2.validateNow();
					video1.validateNow(); */
				}
				catch (err:SecurityError)
				{
					// ignore
				}
			}

			public function stopVideo():void
			{
				try
				{
					if (hasConnectedToP2P)
					{
						//video1.attachCamera(null);
						//playStream1.close();
						//Alert.show("stopStream!");
						//if (publishNetConnection) publishNetConnection.close();
						if (publishStream) {
							publishStream.close();
							publishStream.attachCamera(null);
						}
						isStreaming=false;
					}
				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}

			}

			public function startVideo(stream:String):void
			{
				try
				{
					if (hasConnectedToP2P)
					{
						//Alert.show("startVideo with: " + stream);
						//Alert.show("startStream on " + stream);
						isStreaming=true;
						if (stream == "stream1" || stream == "stream2")
						{
							publishLocation=stream;
		
							publishNetConnection=new NetConnection();
							publishNetConnection.addEventListener(NetStatusEvent.NET_STATUS, publishNetStatus);
							publishNetConnection.connect(SERVER + DEVKEY);
						}
					}
				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}


			}

			private function connect():void
			{
				try {
					netConnection=new NetConnection();
					netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
					netConnection.connect(SERVER + DEVKEY);
				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}
				
				//playNetConnection=new NetConnection();
				//playNetConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				//playNetConnection.connect(SERVER + DEVKEY);

				//play2NetConnection=new NetConnection();
				//play2NetConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				//play2NetConnection.connect(SERVER + DEVKEY);
				//Alert.show("private function connect():void");
			}

			private function setupStreams():void
			{
				try
				{
					var groupspec:GroupSpecifier=new GroupSpecifier(GROUP_SPEC);
					groupspec.serverChannelEnabled=true;
					groupspec.multicastEnabled=true;
					if (isNativeIPMulticast)
					{
						groupspec.ipMulticastMemberUpdatesEnabled=true;
						groupspec.addIPMulticastAddress("225.225.0.1:30303");
					}

					playStream1=new NetStream(netConnection, groupspec.groupspecWithAuthorizations());
					playStream1.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
					
					playStream2=new NetStream(netConnection, groupspec.groupspecWithAuthorizations());
					playStream2.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
					
					netGroup = new NetGroup(netConnection, groupspec.groupspecWithAuthorizations());
					netGroup.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}

				//Alert.show("private function setupStreams():void");
			}
			


			private function setupPublishStream():void
			{
				try
				{
					//Alert.show("setupPublishStream()");
					var groupspec:GroupSpecifier=new GroupSpecifier(GROUP_SPEC);
					groupspec.serverChannelEnabled=true;
					groupspec.multicastEnabled=true;
					if (isNativeIPMulticast)
					{
						groupspec.ipMulticastMemberUpdatesEnabled=true;
						groupspec.addIPMulticastAddress("225.225.0.1:30303");
					}
					publishStream=new NetStream(publishNetConnection, groupspec.groupspecWithAuthorizations());
					publishStream.addEventListener(NetStatusEvent.NET_STATUS, publishNetStatus);
					//Alert.show("private function setupPublishStream():void");
				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}
				
			}

			private function publishNetStatus(event:NetStatusEvent):void
			{
				try
				{


					//Alert.show("private function netStatus(event:NetStatusEvent):void");
					//Alert.show(event.info.code);
					switch (event.info.code)
					{
						case "NetConnection.Connect.Success":
							if (isStreaming)
							{
								setupPublishStream();
							}
							break;
						case "NetStream.Connect.Success":
							if (isStreaming)
							{
								//Alert.show("publishStream.play(" + publishLocation + ");");
								camera=Camera.getCamera()
								//Setup camera for best possible quality
								camera.setMode(300, 240, 30)
								camera.setQuality(0, 90);

								camera.setKeyFrameInterval(24);
								var microphone:Microphone=Microphone.getMicrophone();
								if (microphone)
								{
									microphone.codec=SoundCodec.SPEEX;
									microphone.setUseEchoSuppression(true);
									microphone.setLoopBack(false);
									publishStream.attachAudio(microphone);
								}
								publishStream.attachCamera(camera);

								publishStream.publish(publishLocation);
									//video1.attachCamera(camera);
							}
							break;
						case "NetStream.Publish.Start":
						{
							ExternalInterface.call("startedStreaming", publishLocation);
							break;
						}
							
					}
				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}
			}

			private function netStatus(event:NetStatusEvent):void
			{
				try
				{
					
					//Alert.show("private function netStatus(event:NetStatusEvent):void");
					//Alert.show(event.info.code);
					switch (event.info.code)
					{
						case "NetConnection.Connect.Success":
							setupStreams();
							break;
	
						case "NetStream.Connect.Success":
							hasConnectedToP2P = true;
							if (playStream1 != null)
							{
								playStream1.play("stream1");
								video1.attachNetStream(playStream1);
	
							}
							if (playStream2 != null)
							{
								playStream2.play("stream2");
								video2.attachNetStream(playStream2);
							}
							if (camera)
							{
								ExternalInterface.call("addToQueue");
							}
							//microphone.rate = 11;
	
							//microphone.setSilenceLevel(0);
	
							break;
						case "NetConnection.Connect.Failed"://failed to connect to Rendezvous (Cirrus/FMS)
						{
							/*
							if (!isNativeIPMulticast)
							{
								//likely a P2P issue connecting to the stream, flip the boolean on native ip multicast
								isNativeIPMulticast=true;
								SERVER="rtmfp:"
								DEVKEY=":";
								connect();
							}
							else
							{
								//this happened on a nativeIPMulticast...so client is kinda screwed :p
							}
							*/
							break;
	
						}
						case "NetStream.Connect.Rejected": //rejected the P2P allow/deny window
						{
							Alert.show("You must click 'Allow' on the Peer-Assisted dialog or add this site to the Always-Allowed sites in the Flash Settings Manager");
							//Security.showSettings(SecurityPanel.SETTINGS_MANAGER);
							break;
						}
	
					}
				}
				catch (e:Error)
				{
					//Alert.show(e.message);
				}
			}

			private function vote(stream:Number):void
			{
				ExternalInterface.call("vote(" + stream + ")");
			}

			private function enlargeVote(num:Number):void
			{
				if (num == 1)
				{
					vote1Button.label="VOTE!";
					vote1Button.percentWidth=100;
				}
				else if (num == 2)
				{
					vote2Button.label="VOTE!";
					vote2Button.percentWidth=100;
				}
			}

			private function shrinkVote(num:Number):void
			{
				if (num == 1)
				{
					vote1Button.label="";
					vote1Button.width=20;
				}
				else if (num == 2)
				{
					vote2Button.label="";
					vote2Button.width=20;
				}
			}

			private function flag(stream:Number):void
			{
				ExternalInterface.call("flag(" + stream + ")");
				if (stream == 1)
				{
					video1.filters = filterArray;
				}
				else if (stream == 2)
				{
					video2.filters = filterArray;
				}
			}
		]]>
	</mx:Script>
	<!-- this is the hidden local cam -->
	<!--	<mx:VideoDisplay id="videoDisplay"
						 includeInLayout="false"
						 visible="false"
						 width="{normalWidth}"
						 height="{normalHeight}"/>-->
	<mx:VBox id="mainContainer"
			 width="100%"
			 height="100%"
			 horizontalCenter="0"
			 horizontalAlign="center">


		<mx:HBox width="100%"
				 height="100%"
				 horizontalCenter="0"
				 horizontalAlign="center">


			<mx:VBox id="leftContainer"
					 width="40%"
					 height="100%"
					 horizontalAlign="right"
					 horizontalCenter="0"
					 verticalGap="0"
					 verticalAlign="middle"
					 rollOverEffect="enlargeVote(1)"
					 rollOutEffect="shrinkVote(1)">


				<components:TimerBar id="timerbar"
									 creationComplete="event.currentTarget.init();timerbar.stop();"
									 width="400"
									 height="30"
									 cornerRadius="2"
									 startOnInit="true"
									 showText="false"
									 reverseProgress="true"/>

				<mx:HBox id="leftStream"
						 styleName="videoContainer"
						 width="{normalWidth}"
						 height="{normalHeight}"/>
				<mx:VBox width="100%"
						 horizontalGap="1"
						 verticalAlign="bottom"
						 baseline="0"
						 id="leftControls">
					<mx:Button id="vote1Button"
							   label="V O T E !"
							   styleName="voteButton"
							   toolTip="Vote Up!"
							   click="vote(1)"
							   buttonMode="true"
							   useHandCursor="true"
							   mouseChildren="false"
							   width="100%"
							   enabled="{isBattle}"
							   icon="@Embed(source='../assets/up.png')"/>
					<mx:Label styleName="flagLabel"
							  htmlText="&lt;u&gt;Flag this video as abusive / inappropriate&lt;/uu&gt;"
							  id="flagLabel1"
							  buttonMode="true"
							  opaqueBackground="0x000000"
							  useHandCursor="true"
							  enabled="{isBattle}"
							  mouseChildren="false"
							  click="flag(1)"/>
					<!--<mx:Button label=""
							   styleName="darkButton"
							   toolTip="Flag Inappropriate"
							   click="flag(1)"
							   icon="@Embed(source='../assets/flag.png')"/>-->
				</mx:VBox>

			</mx:VBox>


			<mx:VBox id="midContainer"
					 height="100%"
					 horizontalScrollPolicy="off"
					 width="50"
					 verticalAlign="middle"
					 horizontalAlign="center">
				<mx:Label text="vs"
						  styleName="vsText"
						  id="vsText"/>
				<!--<mx:Button icon="@Embed(source='../assets/fullscreen.png')"
						   styleName="darkButton"
						   toolTip="Fullscreen!"
						   paddingBottom="2"
						   paddingLeft="0"
						   paddingRight="0"
						   paddingTop="2"
						   width="36"
						   click="toggleFullScreen()"/>-->
			</mx:VBox>
			<mx:VBox id="rightContainer"
					 width="40%"
					 height="100%"
					 rollOverEffect="enlargeVote(2)"
					 rollOutEffect="shrinkVote(2)"
					 horizontalAlign="right"
					 horizontalCenter="0"
					 verticalGap="0"
					 verticalAlign="middle">

				<components:TimerBar id="timerbar2"
									 creationComplete="event.currentTarget.init(); timerbar2.stop();"
									 width="400"
									 height="30"
									 cornerRadius="2"
									 startOnInit="true"
									 showText="false"
									 reverseProgress="true"/>

				<mx:HBox id="rightStream"
						 styleName="videoContainer"
						 width="{normalWidth}"
						 height="{normalHeight}"/>
				<mx:VBox width="100%"
						 verticalAlign="bottom"
						 baseline="0"
						 id="rightControls">
					<mx:Button id="vote2Button"
							   styleName="voteButton"
							   label="V O T E !"
							   toolTip="Vote Up!"
							   click="vote(2)"
							   buttonMode="true"
							   useHandCursor="true"
							   mouseChildren="false"
							   width="100%"
							   enabled="{isBattle}"
							   icon="@Embed(source='../assets/up.png')"/>
					<mx:Label styleName="flagLabel"
							  id="flagLabel2"
							  htmlText="&lt;u&gt;Flag this video as abusive / inappropriate&lt;/uu&gt;"
							  buttonMode="true"
							  useHandCursor="true"
							  opaqueBackground="0x000000"
							  enabled="{isBattle}"
							  mouseChildren="false"
							  click="flag(2)"/>
					<!--<mx:Button label=""
							   styleName="darkButton"
							   toolTip="Flag Inappropriate"
							   click="flag(2)"
							   icon="@Embed(source='../assets/flag.png')"/>-->
				</mx:VBox>

			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
</mx:Application>
